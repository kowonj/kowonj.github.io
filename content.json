{"meta":{"title":"kowonj","subtitle":null,"description":null,"author":"W K.","url":"https://kowonj.github.io","root":"/"},"pages":[],"posts":[{"title":"Web Programming","slug":"Web-Programming","date":"2020-05-08T05:05:00.000Z","updated":"2020-05-08T05:07:09.171Z","comments":true,"path":"2020/05/08/Web-Programming/","link":"","permalink":"https://kowonj.github.io/2020/05/08/Web-Programming/","excerpt":"","text":"Links: 웹 프로그래밍 튜토리얼, Frontend Roadmap, Nomad Academy Roadmap, Roadmap for FrontendInternet How does the internet work? What is HTTP? Browsers and how they work? DNS and how it works? What is Domain Name? What is hosting? HTML5 Learn the basics Writing Semantic HTML Forms and Validations Conventions and Best Practices Accessibility SEO Basics CSS3 Learn the basics Making Layouts Floats Positioning Display Box Model CSS Grid Flex Box Responsive design and Media Queries jQueryJavaScript Syntax and Basic Constructs Learn DOM Manipulation Learn Fetch API / AJAX (XHR) ECMAScript6+ and modular JavaScript Understand the concepts Hoisting, Event Bubbling, Scope, Prototype, Shadow DOM, strict Version Control Systems What are they and why you should use one Repo hosting services Create account and Learn to use Github Github GitLab Bitbucket Basic Usage of Git Web Security Knowledge Get at least a basic knowledge of all of these: HTTPS Content Security Policy CORS OWASP Security Risks Package Managers npm yarn CSS Architecture With modern frameworks and CSS-in-JS you don’t have to worry about these anymore but still it would be a good idea to get familiarized with BEM at least. BEM OOCSS SMACSS CSS Preprocessors With how the modern frameworks there has been more push towards CSS-in-JS so you may not need these but still a good idea to familiarize yourself. Sass PostCSS Less Build Tools Task Runners npm scripts Gulp Linters and Formatters Prettier ESLint StandardJS Module Bundlers Webpack Rollup Parcel Pick a Framework React.js Redux MobX Angular RxJS NgRx Vue.js VueX Modern CSS Styled Components CSS Modules Styled JSX Emotion Radium Glamorous Web Componenets HTML Templates Custom Elements Shadow DOM CSS Frameworks Reactstrap Material UI Tailwind CSS Chakra UI ** JS based and better to use with your framework based JavaScript applications. Bootstrap Materialize CSS Bulma ** CSS first frameworks which don’t come with JavaScript components by default. Testing your Apps** Learn the difference between Unit, Integration, and Functional tests and learn how to write them with the tools listed below: Jest react-testing-library Cypress Enzyme ** You can fill all your testing needs with just these above. Mocha Chai Ava Jasmine Type Checkers TypeScript Flow SnippetNode.jsMongoDBProgressive Web Apps Storage Web Sockets Service Workers Location Notifications Device Orientation Payments Credentials ** Learn different Web APIs used in PWAs. PRPL Pattern RAIL Model Performance Metrics Using Lighthouse Using DevTools ** Calculating, Measuring and improving performance. ServerSide Rendering (SSR) React.js Next.js After.js Angular Universal Vue.js Nuxt.js GraphQL Apollo Relay Modern Static Site Generators Next.js GatsbyJS Nuxt.js Vuexpress Jekyll Hugo Mobile Applications React Native NativeScript Flutter Ionic Desktop Applications Electron Carlo Proton Native Web Assembly** Web Assembly or WASM is the binary instructions generated from higher level languages such as Go, C, C++ or Rust. It is faster than JavaScript and WASM 1.0 has already shipped in the major browsers. W3C accepted it as an official standard at the end of 2019. It will still take quite some time to go mainstream though. Frontend Roadmap","categories":[{"name":"Web Programming","slug":"Web-Programming","permalink":"https://kowonj.github.io/categories/Web-Programming/"},{"name":"Front-end Roadmap","slug":"Web-Programming/Front-end-Roadmap","permalink":"https://kowonj.github.io/categories/Web-Programming/Front-end-Roadmap/"}],"tags":[{"name":"Web Programming","slug":"Web-Programming","permalink":"https://kowonj.github.io/tags/Web-Programming/"},{"name":"HTML5","slug":"HTML5","permalink":"https://kowonj.github.io/tags/HTML5/"}]},{"title":"Starting GitHub blog with Hexo","slug":"Hexo-Gitblog","date":"2019-09-21T14:30:00.000Z","updated":"2019-09-22T15:27:09.509Z","comments":true,"path":"2019/09/21/Hexo-Gitblog/","link":"","permalink":"https://kowonj.github.io/2019/09/21/Hexo-Gitblog/","excerpt":"","text":"Links: Hexo: Hexo documentation, Hexo troubleshooting, Hexo GitHub, Hexo Themes, Hexo Twitter. Git RepositoryCreate two repositoriesYou need two repositories: Repo for framework: a. Create a repo (private) ex. myBlog b. git clone the repo to local c. Then, branch off from master 12$ git checkout master $ git checkout -b initial-setup This is the directory you need to install Hexo framework. Repo for publishing posts: a. Create a repo. You need set the name of the repo as below. The repo should be ‘public’. 1[your-github-username].github.io HexoHexo supports GitHub Flavored Markdown, Heroku, Openshift. 1. Initial Setup of HexoInstall Hexo a. Install Hexo-cli 1$ npm install -g hexo-cli b. Install Hexo: If you are already in the directory you want to install Hexo, you don’t need to enter the dir for init command. 12$ cd ~/myBlog$ hexo init If you are not in the directory, then specify the folder name.Notes: The directory should be the git repo folder for the version control. 1$ hexo init [your new dir: ex. myBlog] Install npmRequires Node.js and Git 12$ cd myBlog/$ npm install Troublshooting an issue: Link 1 12$ npm i -f$ npm install ### Generated Folder Structure After above steps, the following folder structure generated: 12345678. # Blog root folder├─ _config.yml # Config file├─ package.json├─ scaffolds # Base format├─ source # Source folder| ├─ _drafts # Draft folder| └─ _posts # Post folder└─ themes # Theme folder 2. Create a new post or a draft (*.md) Notes: You can either customize the scaffolds structure or add a new one. a. Post: In the dir: ‘~/myBlog/source/_posts‘ 1$ hexo new \"My New Post\" b. Draft: In the dir: ‘~/myBlog/source/_drafts‘ 1$ hexo new draft 'Post name' More info: Writing 3. Run server: http://localhost:40001$ hexo server More info: Server 4. Install plugin to publish and deploy to GitHub page a. Install hexo-deployer-git 1$ npm install hexo-deployer-git --save b. Modify ‘_config.yaml‘ for the project settings. 1234deploy:type: gitrepo: https://github.com/[*username*]/[*username*].github.io.gitbranch: master Notes: [username] is your github accout username. 5. Build and DeployGenerate static files (Build) in ‘public’ folder &amp; Deploy to a remote site. Empty the previous buildEmpty the ‘public’ directory which is a previous build if it exists. 1hexo clean ### Build 1$ hexo generate # Same as: $ hexo g More info: Generating Deploy1$ hexo deploy # Same as: $ hexo d ### Build and deploy 1hexo g -d More info: Deployment To kill a ghost port 4000Windows a. Find the port: 1netstat -ano | findstr 4000 b. Kill the PID: 1tskill //pid [pid#] //f If you use Git Bash: 1taskkill //pid [pid#] //f If you git reset commits on the publishing repo:In the root folder for ‘[username].github.io’ repo:12345678git checkout mastergit reset --hard fsd2ed46e623123b6f28925b3sdfe96cce82eafgit push --force origin master# Then to prove it (it won't print any diff)git diff master..origin/master In the root folder for the framework for gitblog repo:Delete ‘.deploy_git’ folder in the root folder for the framework. If you need, re-install ‘hexo-deployer-git’ 1$ npm install hexo-deployer-git --save Reference links:hyunseob, dogfeetRelated to Static site: 62che","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://kowonj.github.io/categories/Hexo/"},{"name":"Initial Setup","slug":"Hexo/Initial-Setup","permalink":"https://kowonj.github.io/categories/Hexo/Initial-Setup/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://kowonj.github.io/tags/hexo/"},{"name":"GitHub blog","slug":"GitHub-blog","permalink":"https://kowonj.github.io/tags/GitHub-blog/"},{"name":"Static site","slug":"Static-site","permalink":"https://kowonj.github.io/tags/Static-site/"}]},{"title":"Adding Hueman Theme to Hexo","slug":"Hueman-theme","date":"2019-09-21T14:30:00.000Z","updated":"2019-09-22T15:18:34.036Z","comments":true,"path":"2019/09/21/Hueman-theme/","link":"","permalink":"https://kowonj.github.io/2019/09/21/Hueman-theme/","excerpt":"","text":"Hueman ThemeAdding Hueman Theme1. Clone or downloadGit clone Hueman theme in the root folder: ex. ~/myBlogYou can also select the download option. 1git clone https://github.com/ppoffice/hexo-theme-hueman.git themes/hueman 2. Modify the name of the config file: ‘_config.yml’ for theme12cd themes/huemanmv _config.yml.example _config.yml 3. Install dependancyTo use ‘Insight Search’ feature of the hueman theme in the root folder: 12cd ~/myBlognpm install -S hexo-generator-json-content 4. Delete the ‘.git’ folder in the themes/huemanUnless you want a submodule git, delete ‘.git’ folder in the themes/hueman folder. Additional things: Adding Subtitle for Posts (in Korean): Notes: Other than adding ‘etc.css’ file under source, you should add it in ‘~\\themes\\hueman\\source\\libs\\custom\\css\\etc.css‘, so it won’t appear on the search feature as a unknown page. Adding static menus on the top Font chnage in Hueman theme Reference links: futurecreator, theK, d2fault Hueman-Wiki, Hueman Showcase, WP demo Other theme: Hexo Themes, icarus Markdown: ihoneymon:gist Discus: korbuddy Font Awesome Cheatsheet","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://kowonj.github.io/categories/Hexo/"},{"name":"Hueman Theme","slug":"Hexo/Hueman-Theme","permalink":"https://kowonj.github.io/categories/Hexo/Hueman-Theme/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://kowonj.github.io/tags/hexo/"},{"name":"GitHub blog","slug":"GitHub-blog","permalink":"https://kowonj.github.io/tags/GitHub-blog/"},{"name":"Static site","slug":"Static-site","permalink":"https://kowonj.github.io/tags/Static-site/"},{"name":"hueman","slug":"hueman","permalink":"https://kowonj.github.io/tags/hueman/"}]}]}